---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVjdRRXYyRERVRkJRT0dHRTYrWWFPREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TVRBeE5URTNNak15TjFvWApEVEkwTVRBeE5ERTNNak15TjFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUDJjN293QTJxa0tpM0JWQzhva3p2M1YKM1IxbnYyVnNacHVJYVFkaFVET0t3WkpVSk9KOW8zLzM4bllxYklES2g5d2RCS2s0VU9nbHpQNEgwQXZiMTJQegpWSW05SzZueC9tSnJLTDhzVWxtWk9XclhQdzh1VVVDclhoWmMzdEg1VzdFVGJwaVFPV0FUR2xVc2h2SjVWK3QrClBUWDNEVzA2czREZnpta3k4NGhEa1J0MnNramFGQ3RTbGROVlUxM1NldStHeWdPOHlhZTF6RlQxME9lcFdobU0KZ0xka1NjSUlZYllGdWdESCs0cGtDNHVHM1E4em80NjdhQWU0TmFaZTJQZFRmelgxU1psU1lPVENqWmVsVE5YdwpiM1lvZzRjTVRjTzM1ak5PY2EzUHNuMUdkQWdiT2hzYkVOUy9KT2hKaERkOXRmUHBYYXl2VVFyWmZLanZwZEVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIQUh0V3RyRklaQUt4ajZ1UGhzaXVHNGNjaVRYTU9BCmlCUXFTT3BXbWZDZm5UT2hyVnNCWlpzV0svbk9obEZNaDc1d0lWQUxlc3FxdW1LdHM1NzZ0ekg4UXNTd0N3RFMKYURZOGhEUHNBNW5Ub3BCa0F5TzlMZHovN21DUGs0TXIybnhscFRzc00wNVdwK3VYTGdDOEJiQkJFZFMvVUo2MAovck41M0paYStnc0txNThRS2Z2bkpuTFQ2a085bjRGWE5KRHQ5Mml1d2puSC8vUnVnRjJQampZcXNETDRWTm1HCkdRaitNRSsraHBDVEJ5SVg4aFlRWitKUU1Da1h1U01SaTcrRjUwNUVHRVlwMTlHOXd6MDhibmFzdTAyWkhuMkMKTTVicDJaSi9JWTh6eUhNWkxRVEdLcUxnTk5xcHk4MWp0R3FibzdsbWQwRmx4N0laS04wWkJEYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBL1p6dWpBRGFxUXFMY0ZVTHlpVE8vZFhkSFdlL1pXeG1tNGhwQjJGUU00ckJrbFFrCjRuMmpmL2Z5ZGlwc2dNcUgzQjBFcVRoUTZDWE0vZ2ZRQzl2WFkvTlVpYjBycWZIK1ltc292eXhTV1prNWF0Yy8KRHk1UlFLdGVGbHplMGZsYnNSTnVtSkE1WUJNYVZTeUc4bmxYNjM0OU5mY05iVHF6Z04vT2FUTHppRU9SRzNheQpTTm9VSzFLVjAxVlRYZEo2NzRiS0E3ekpwN1hNVlBYUTU2bGFHWXlBdDJSSndnaGh0Z1c2QU1mN2ltUUxpNGJkCkR6T2pqcnRvQjdnMXBsN1k5MU4vTmZWSm1WSmc1TUtObDZWTTFmQnZkaWlEaHd4Tnc3Zm1NMDV4cmMreWZVWjAKQ0JzNkd4c1ExTDhrNkVtRU4zMjE4K2xkcks5UkN0bDhxTytsMFFJREFRQUJBb0lCQVFEWUduVWFUMUFEWXJ6VwpoMkY0YWswRzlzbG5XUlE2TkZocWg1NFhiOUNMV3R6Kzl6eEcwcEFUWncvdnFNNjBIK0FNcTUxaEpGK3NzU2t2Ci9UQkdLcG9xelJsb0ZRMnp6a1RaVUQ1MFNDd1R0UUM4RFpYcU5hbCsxWWRpdnRnUFM4L1ozNWtKM3p0RXBvSjEKdVc5MEJmbm83TFR6MndSUjR3YzU5WHRKSU9WcllaVnlBQm03Rng0elRHdGVlZXVUZDBNQmJGVkJpR1drTVNyVAo5T3liaHJEWkx3ZkZ6M3F3SkNhVWNKdVJRaFpxOWIyM2wrN1RXWDZFNEt0K3NxK09QR3hIK3R4NGRib0lQS2w1CmZKTTQ3OHZxd2o4UXNQVjBqYmlOcjVpNnRKeDJUcy9NcUJ5S0RqQVRUZFFOWjEzYnBkTm94M2dib1ZTRXFlQWoKM2d2U2VHQUJBb0dCQVA4d05VcFZMKzZvdUZMdjdNV2NPaXgxR0F2dmtJaFIvMmdrSzA1K0tBMS96Q2ZlcEtsMQpyUUIvd0pzRjdyMFVtVGVyY2h1TTB6RGNuMDJVUEpRZGlNWjNvWW44bzBYK3R1MXR4LzVOcWw0S040bUxXazRrClVrdTBQSE9kcUt0QjYzZXo0bFFwRHllVXEzWE0wcTQwVitMVkRjOThReGltM1VUOUd2QWhrSHVCQW9HQkFQNXIKY09HYUVUR0Nld1dBZFFnY2Z1ckhLQ0l3YkJ1VG4zbVE3cGY1WVBoQWZRYytmQWpSMnFsS2plR2lmbzA2N2pJNgorQkRwTUkvbE45aGVRZHdaRjRYb28vdXpMVGdUS01pQVAyM3lIV0k3aDdYaE1takcyV24xb0d2OXVKZXE1bXVlCnVNZXVBSWRjUUtxVmhlak1pUE13L09mNW9lZWYwZjBISWhCc1NaSlJBb0dCQUtuOTZqSDNKM1A3VHJaby96ZncKUjB4Z1FFR0xONk9udzlVUzZ3cGh2YnFvWEU1ZTRSL0Z0UlkxQkJBQTFyVjhLRWpPVzdnQWlwcnRETzI0QnRiQQpDZUh6eFZkUFJWQ1dTak5GdzBrallZODlqUnVDQ2drdDV1aHBTeS9WWVl1YjRRaWZldkNIWFlJSFptU1ZxZTdFCkRadWNRNVBvK2lWTTJ1OWZEL2ZRMUJlQkFvR0FQeUJmZU1xbWUzZFptT3JmbnV5YkhSdmZQR1J4WG9KSmJudGsKaC9iTGRhMWltRnFMb2hDWHhhdUcrclk3MmtVRjl4YWttR1dUdEJCMnc4dlhZWW9rU1FpSkw1bXNuWjQ3WDB4YQo4S2ZEWEsxU3BmRkRkYlhwR2g1aytJYVN0NmNpMXc4aDRBR3ZoZWFBOFJKNmtHRzNsVWZSYUttSzM1TExJcElUCmhLbXBzNUVDZ1lCQnBuWTVmQ1U1cU1FY2p0TEFHalpBL1QrN3l6ODBBSUJQdTdGNFBrWlUyQXJpZXB1dVdZNisKVjVBaGdVRW02WStNZVdlQk4zNWNReEgvWDBMMmxDWUNuZHRMMlFkREdBWU94OVFYMjVyM2Q5QnRDTmhDZ3hjWApqb3RiSVRndnBQSUt6RWVhREFuODJkMmRFZmJKRGlUV1E3azE2K1FLUjEwQ2JuMHhzdk9odmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRVjdRRXYyRERVRkJRT0dHRTYrWWFPREFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TVRBeE5URTNNak15TjFvWApEVEkwTVRBeE5ERTNNak15TjFvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUDJjN293QTJxa0tpM0JWQzhva3p2M1YKM1IxbnYyVnNacHVJYVFkaFVET0t3WkpVSk9KOW8zLzM4bllxYklES2g5d2RCS2s0VU9nbHpQNEgwQXZiMTJQegpWSW05SzZueC9tSnJLTDhzVWxtWk9XclhQdzh1VVVDclhoWmMzdEg1VzdFVGJwaVFPV0FUR2xVc2h2SjVWK3QrClBUWDNEVzA2czREZnpta3k4NGhEa1J0MnNramFGQ3RTbGROVlUxM1NldStHeWdPOHlhZTF6RlQxME9lcFdobU0KZ0xka1NjSUlZYllGdWdESCs0cGtDNHVHM1E4em80NjdhQWU0TmFaZTJQZFRmelgxU1psU1lPVENqWmVsVE5YdwpiM1lvZzRjTVRjTzM1ak5PY2EzUHNuMUdkQWdiT2hzYkVOUy9KT2hKaERkOXRmUHBYYXl2VVFyWmZLanZwZEVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIQUh0V3RyRklaQUt4ajZ1UGhzaXVHNGNjaVRYTU9BCmlCUXFTT3BXbWZDZm5UT2hyVnNCWlpzV0svbk9obEZNaDc1d0lWQUxlc3FxdW1LdHM1NzZ0ekg4UXNTd0N3RFMKYURZOGhEUHNBNW5Ub3BCa0F5TzlMZHovN21DUGs0TXIybnhscFRzc00wNVdwK3VYTGdDOEJiQkJFZFMvVUo2MAovck41M0paYStnc0txNThRS2Z2bkpuTFQ2a085bjRGWE5KRHQ5Mml1d2puSC8vUnVnRjJQampZcXNETDRWTm1HCkdRaitNRSsraHBDVEJ5SVg4aFlRWitKUU1Da1h1U01SaTcrRjUwNUVHRVlwMTlHOXd6MDhibmFzdTAyWkhuMkMKTTVicDJaSi9JWTh6eUhNWkxRVEdLcUxnTk5xcHk4MWp0R3FibzdsbWQwRmx4N0laS04wWkJEYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.14.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.14.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.43.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: dd795ce6a3690064837cb0efdaeb8670aedcf91744b43cf0b07fad7d6b11c41d
        linkerd.io/created-by: linkerd/helm stable-2.14.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSlRrMnlWL3RDYkZ5TUVsMEhZclVmREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TVRBeApOVEUzTWpNeU4xb1hEVEkwTVRBeE5ERTNNak15TjFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5VMlArYUJLZmhzeVJpV1ZWOVUrSUJkTXk5M21UVjRORlVCYmFReHdld0JlOEhnbW1zTXJzRFdhYXZqUEIzNQpwV1RPQUVqMW5Mbk4rdmtYa0RCL2JmeHJYYnlRMUxBUFFJMHIyN2UrTmxjcXhlYmJlcjVNaS96b1ZoeWdhNXlZCnVLZ3RGdy9DOFZROXhzeVdiU3FTOWZkMGVyb2hGTElsZk5VZ2VtWkRuaHVsK21LSXZ4djN2SkdDR3kwNXV1WjgKdFpNaUVIZ2kvemxwZUtldk9MUko4SzlCM2t6UWlDemFMNVcyV2lyMFJMOGFrekVPQkJCUHFKMHlqdE9Gbk5RRgpMYlgyTzh5OHo3SmQ4T21TL21lb0xPc1EvKzIrckF0NGVHR1E3WWxaenRwN0xRbDEyTFFPNTlnay85RmZ6TTNTCmRPZnpaVnpyWjh6cGhxd2xmMVZzdnRNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRzBrVS9kMFRpMXowUEhubUgvcGo5eTNNUkl3bzVTcWxMVCsyZjR1T1l1YUlRL3BBVDFDaVgxd0VoVnEKdWxrM0JtdXVlMVRzM3FIQ1ViTVhjcExweFJNZzRwbnNIaVJITVB6bjdCYy9zSm5vdENLdUFwOFVVVXQxTXdBSwpUQ09XTlhYMlVzWXVvOUNOT0hFWFdvd0h0NTZpY1huRHNjV3gzbDY4Yk5rYmVlN1VGaUdFSFptR3BGMGgvM3I5CmplbHVsV2dDMHdWMGRmSjVKbDdpUXRhZEt5cm1CVm1nbEdCTzh6eklxS0xRbm5Qcnl1aDNXT1dUNUpjbU1nNU8KMEtQSlJmZUtLUWpPZ2Ezb09HR0tScXJCc3pBTVpGTUNrSWVVaUlvUEtvUVNZNzYxUThyK3FmTjZ4Sk95SnBBZApaV1V1TGVUR3pLb21PZzNBZ0dHVGdWblFnQzg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMVRZLzVvRXArR3pKR0paVlgxVDRnRjB6TDNlWk5YZzBWUUZ0cERIQjdBRjd3ZUNhCmF3eXV3TlpwcStNOEhmbWxaTTRBU1BXY3VjMzYrUmVRTUg5dC9HdGR2SkRVc0E5QWpTdmJ0NzQyVnlyRjV0dDYKdmt5TC9PaFdIS0JybkppNHFDMFhEOEx4VkQzR3pKWnRLcEwxOTNSNnVpRVVzaVY4MVNCNlprT2VHNlg2WW9pLwpHL2U4a1lJYkxUbTY1bnkxa3lJUWVDTC9PV2w0cDY4NHRFbndyMEhlVE5DSUxOb3ZsYlphS3ZSRXZ4cVRNUTRFCkVFK29uVEtPMDRXYzFBVXR0Zlk3ekx6UHNsM3c2WkwrWjZnczZ4RC83YjZzQzNoNFlaRHRpVm5PMm5zdENYWFkKdEE3bjJDVC8wVi9NemRKMDUvTmxYT3Ruek9tR3JDVi9WV3krMHdJREFRQUJBb0lCQURVVERoRVpNaE52TVJmMwp4RVM0NkNzOENCUFcxOEtocTVWRmg3K0p5MVl1Z0ZvZ3lRL0ExbmVXYURPcm16bHkvYUw4VE1IY3Npam1oNFVlClFueHdIRGJybXlmbmZhcGVBWm1pdzAwWUFucnNZTnM0NDNNZnB2RkwvTE9mazJvbDhrR2JCOVNhbUd4NS9GVE4KVlZ0MXZkamRtL2RkYU1OMzVYMUFXbmUrZVVzMEw3QUpIRVZ4R1FGaW5Idy84ellhbHYzdEp1Z3AvejJXTDZmNApKM3pzTWR3Y1lsSlN5Qk1xd0dWbXpBellTc0ZWYk51T0lXa1paRncwdjdqSGorZ01XMGVTQy8wdktPYU9jaEUzClVtaHJxaVlUQk8rNU51NzVNY1J3MkFKTHJNREhvSXZTbkx1Q1RLcFZVaFcramJWbU52SmxzV1NNQTlIcjVOdmQKZDgvS1NuRUNnWUVBNTNxa1R5MzUzK3FBQWZncVpXUEtpK1JiOXhVd0FwOVFYcktYQ2JObEFUazk5MzdWSUVKTgplYUpwZTRKWm56RU9HbjZkalArUXdrbDQ2alZNRHZXVHp5ODhFOWl1YTV0a2xZeXJJZEoycmlNMHFNZStQRVI1CjJEWHBzV0Rpd0NNQ3BZZHNEek5uR21reks3UXpXSmNPNFkrZkVlek11ZlFmL0FSVVpFQmhmbGNDZ1lFQTY4dzYKL1Y1N2JESVR2UVRJeW9KeXI5OTZ5N0MwYW93RC9lWElNYStGTTU5WUlUTUZnVjZZVkdmL3ZIeXBOeGE1UE9VYgo3cjY1K3h3UVU3ZWdNMlVMaWRaaiszWjRiN3paWmVuTWFBN0dMeUhLQnhOeml3d1JxZ2ZscnFrbEVOZjZrRzMvCk83MGR6Y3pRamd4SGErWGJaQUliZGhVTmNZY1JUZ1ozVWl4RVBlVUNnWUJXczI0RnBqL1lhYm9HZ3RCR1o2aysKMm9yRHNqRG9Xb204M29HS0JhS0lZY3RlL3llT3pLYStMMkg0KytyYm9JRWExVi9ucHZXdWY5eUZSTzgzRHk2TQp4TEZvOFpqcS95b2VoYkMzbTJBT2UydEc2SUhOaXd4a09sVk10ZkJZYlFTWndXNXRCeURRR0tVczhuTGs5TGVECkxzc3k2SklKK0hGZWNMUzNWQkh3UXdLQmdRQ0RiNlVXSkh0aDFRd2htYkFmQ2RYSjZTVjJzdm51Ump2WFpDVlMKWk1jMy9rTk94alQwWnZrOFczZzI1Ym9oSmY1OVRpeGl5VmU3L0dteGNMTFEweXM2V3hJQ1VvaFJxSS81K2ZmaApyUktWcFIwTEVyR2VPVTBEWFVHUE9XT2EzdmtoVnQ4bHVvWUplSGhzSmJZT0UrTlYvTUszOElZODJSQXhVUE5rCkQ1NitiUUtCZ0JtaVlScTlCVzhTajdOYTZNdy9jVWwwTDRFZmZDblZjb3hUdDVZdjlGWS92UnJDK1lBYnF0OXMKS1pCc3BZTDNkdGw4YzRVL2pMVitnTjlpTG1maHhyY1gxQTl1ZkpoNzRzSk4wVkZuTzlvdUlWelZGS2F5SWRwdAplS2JRSWRhM1JoTWVXYnZScDk1VGpidkNaWERMaGVYWWFGMlc5UGZTYXNadjV0TnRNc1VBCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRSlRrMnlWL3RDYkZ5TUVsMEhZclVmREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TVRBeApOVEUzTWpNeU4xb1hEVEkwTVRBeE5ERTNNak15TjFvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5VMlArYUJLZmhzeVJpV1ZWOVUrSUJkTXk5M21UVjRORlVCYmFReHdld0JlOEhnbW1zTXJzRFdhYXZqUEIzNQpwV1RPQUVqMW5Mbk4rdmtYa0RCL2JmeHJYYnlRMUxBUFFJMHIyN2UrTmxjcXhlYmJlcjVNaS96b1ZoeWdhNXlZCnVLZ3RGdy9DOFZROXhzeVdiU3FTOWZkMGVyb2hGTElsZk5VZ2VtWkRuaHVsK21LSXZ4djN2SkdDR3kwNXV1WjgKdFpNaUVIZ2kvemxwZUtldk9MUko4SzlCM2t6UWlDemFMNVcyV2lyMFJMOGFrekVPQkJCUHFKMHlqdE9Gbk5RRgpMYlgyTzh5OHo3SmQ4T21TL21lb0xPc1EvKzIrckF0NGVHR1E3WWxaenRwN0xRbDEyTFFPNTlnay85RmZ6TTNTCmRPZnpaVnpyWjh6cGhxd2xmMVZzdnRNQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRzBrVS9kMFRpMXowUEhubUgvcGo5eTNNUkl3bzVTcWxMVCsyZjR1T1l1YUlRL3BBVDFDaVgxd0VoVnEKdWxrM0JtdXVlMVRzM3FIQ1ViTVhjcExweFJNZzRwbnNIaVJITVB6bjdCYy9zSm5vdENLdUFwOFVVVXQxTXdBSwpUQ09XTlhYMlVzWXVvOUNOT0hFWFdvd0h0NTZpY1huRHNjV3gzbDY4Yk5rYmVlN1VGaUdFSFptR3BGMGgvM3I5CmplbHVsV2dDMHdWMGRmSjVKbDdpUXRhZEt5cm1CVm1nbEdCTzh6eklxS0xRbm5Qcnl1aDNXT1dUNUpjbU1nNU8KMEtQSlJmZUtLUWpPZ2Ezb09HR0tScXJCc3pBTVpGTUNrSWVVaUlvUEtvUVNZNzYxUThyK3FmTjZ4Sk95SnBBZApaV1V1TGVUR3pLb21PZzNBZ0dHVGdWblFnQzg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: c3e3a26248096292bc74a4d676acdaff2088413e0a7387544a9bb72abf2fe6c3
        linkerd.io/created-by: linkerd/helm stable-2.14.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.1
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.1
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.14.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
